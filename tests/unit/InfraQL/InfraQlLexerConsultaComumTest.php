<?php
namespace InfraQL;

class InfraQlLexerConsultaComumTest extends \Codeception\Test\Unit
{

    private const EXEMPLO_INPUT = "
        \t
        SELECT
            StrNome,
            NumIdade
        FROM
            PessoaDTO
        WHERE
            NumIdade >= 18
            AND (StrNome = 'Donald Knuth')
        ORDER BY
            StrNome,
            NumIdade
    ";

    protected $objInfraQlLexer;

    protected function _before()
    {
        $this->objInfraQlLexer = new InfraQlLexer(self::EXEMPLO_INPUT);
    }

    protected function _after()
    {
        $this->objInfraQlLexer = null;
    }

    public function testDeveIdentificarOSelectComoToken()
    {
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::SELECT, $token->getNumType());
        $this->assertEquals("SELECT", $token->getStrText());
    }

    public function testDeveIdentificarOsCamposStrNome()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $token->getNumType());
        $this->assertEquals("StrNome", $token->getStrText());
    }

    public function testDeveIdentificarAVirgulaEntreOsCampos()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::COMMA, $token->getNumType());
        $this->assertEquals(",", $token->getStrText());
    }

    public function testDeveIdentificarOsCamposNumIdade()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $token->getNumType());
        $this->assertEquals("NumIdade", $token->getStrText());
    }

    public function testDeveIdentificarOFrom()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FROM, $token->getNumType());
        $this->assertEquals("FROM", $token->getStrText());
    }

    public function testDeveIdentificarONomeDoDto()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::DTO_NAME, $token->getNumType());
        $this->assertEquals("PessoaDTO", $token->getStrText());
    }

    public function testDeveIdentificarOWhere()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::WHERE, $token->getNumType());
        $this->assertEquals("WHERE", $token->getStrText());
    }

    public function testDeveIdentificarNumIdadeNaClausulaWhere()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $token->getNumType());
        $this->assertEquals("NumIdade", $token->getStrText());
    }

    public function testDeveIdentificarOMaiorOuIgualQueNaPrimeiraCondicao()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::GREATER_THAN_OR_EQUAL_TO, $token->getNumType());
        $this->assertEquals(">=", $token->getStrText());
    }

    public function testDeveIdentificarONumeroNaPrimeiraCondicao()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::NUMBER_INTEGER, $token->getNumType());
        $this->assertEquals("18", $token->getStrText());
    }

    public function testDeveIdentificarOOperadorLogico()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::LOGICAL_OPERATOR_AND, $token->getNumType());
        $this->assertEquals("AND", $token->getStrText());
    }

    public function testDeveIdentificarOParentesesEsquerdo()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::PARENTHESES_LEFT, $token->getNumType());
        $this->assertEquals("(", $token->getStrText());
    }
    
    public function testDeveIdentificarOCampoPosOParentesesEsquerdo()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $token->getNumType());
        $this->assertEquals("StrNome", $token->getStrText());
    }
    
    public function testDeveIdentificarOOperadorIgualDentroDoParenteses()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::EQUAL, $token->getNumType());
        $this->assertEquals("=", $token->getStrText());
    }
    
    public function testDeveIdentificarAStringNoParenteses()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::USER_STRING, $token->getNumType());
        $this->assertEquals("'Donald Knuth'", $token->getStrText());
    }
    
    public function testDeveIdentificarOParentesesDireito()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a string...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::PARENTHESES_RIGHT, $token->getNumType());
        $this->assertEquals(")", $token->getStrText());
    }
    
    public function testDeveIdentificarOOrderBy()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a string...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses direito...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::ORDER_BY, $token->getNumType());
        $this->assertEquals("ORDER BY", $token->getStrText());
    }
    
    public function testDeveIdentificarOCampoNoOrderBy()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a string...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses direito...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o ORDER BY...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $token->getNumType());
        $this->assertEquals("StrNome", $token->getStrText());
    }
    
    public function testDeveIdentificarAVirgulaNoOrderBy()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a string...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses direito...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o ORDER BY...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::COMMA, $token->getNumType());
        $this->assertEquals(",", $token->getStrText());
    }
    
    public function testDeveIdentificarOSegundoCampoNoOrderBy()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a string...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses direito...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o ORDER BY...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $token = $this->objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $token->getNumType());
        $this->assertEquals("NumIdade", $token->getStrText());
    }
    
    public function testMetodoParaTestarLetrasDeveFuncionarCorretamente()
    {
        $objInfraQlLexer = new InfraQlLexer("A1Z9aH5z");
        $this->assertTrue($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertFalse($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertTrue($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertFalse($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertTrue($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertTrue($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertFalse($objInfraQlLexer->isLetter());
        $objInfraQlLexer->consume();
        $this->assertTrue($objInfraQlLexer->isLetter());
    }

    public function testMetodoParaTestarNumerosDeveFuncionarCorretamente()
    {
        $objInfraQlLexer = new InfraQlLexer("A1Z9");
        $this->assertFalse($objInfraQlLexer->isNumber());
        $objInfraQlLexer->consume();
        $this->assertTrue($objInfraQlLexer->isNumber());
        $objInfraQlLexer->consume();
        $this->assertFalse($objInfraQlLexer->isNumber());
        $objInfraQlLexer->consume();
        $this->assertTrue($objInfraQlLexer->isNumber());
    }

    public function testOUltimoTokenLidoDeveIniciarComoVazio()
    {
        $this->assertEquals(InfraQlTokenType::BOF, $this->objInfraQlLexer->getObjPreviousToken()
            ->getNumType());
        $this->assertEquals("", $this->objInfraQlLexer->getObjPreviousToken()
            ->getStrText());
    }

    public function testAposPularOCampoStrNomeOCampoDeveSerRetornadoComoOUltimoTokenLido()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->assertEquals(InfraQlTokenType::FIELD_NAME, $this->objInfraQlLexer->getObjPreviousToken()
            ->getNumType());
        $this->assertEquals("StrNome", $this->objInfraQlLexer->getObjPreviousToken()
            ->getStrText());
    }

    public function testQuandoChegarAoFinalDoTextoDeveRetornarUmTokenDeEof()
    {
        $objInfraQlLexer = new InfraQlLexer("SELECT");
        $objInfraQlLexer->getObjNextToken(); // Pular SELECT...
        $token = $objInfraQlLexer->getObjNextToken();
        $this->assertEquals(InfraQlLexer::EOF_TYPE, $token->getNumType());
        $this->assertEquals("", $token->getStrText());
    }

    public function testSeNaoForIdentificadoTokenDeveLancarExcecao()
    {
        $strComandoInfraQL = "AWEF3242F2F242RE2R2F22F342F2234";
        $bolExcecaoLancada = false;
        $objInfraQlLexer = new InfraQlLexer($strComandoInfraQL);
        try {
            $objInfraQlLexer->getObjNextToken();
        } catch (\Exception $e) {
            $bolExcecaoLancada = true;
            $this->assertEquals("O comando InfraQL contem texto nao previsto na linguagem de consulta. Comando analisado: [{$strComandoInfraQL}].", $e->getMessage());
        }
        if (! $bolExcecaoLancada) {
            $this->fail("Uma excecao deve ser lancada.");
        }
    }
    
    public function testSeCaractereNaoPrevistoForPassadoEntaoDeveLancarExcecao()
    {
        $strCaractereNaoPrevisto = "%";
        $strComandoInfraQL = "{$strCaractereNaoPrevisto} SELECT StrNome FROM PessoaDTO";
        $bolExcecaoLancada = false;
        $objInfraQlLexer = new InfraQlLexer($strComandoInfraQL);
        try {
            $objInfraQlLexer->getObjNextToken();
        } catch (\Exception $e) {
            $bolExcecaoLancada = true;
            $this->assertEquals("O caractere {$strCaractereNaoPrevisto} nao esta previsto na linguagem de consulta. Comando analisado: [{$strComandoInfraQL}].", $e->getMessage());
        }
        if (! $bolExcecaoLancada) {
            $this->fail("Uma excecao deve ser lancada.");
        }
    }

    public function testOContextoDaClausulaSelectDeveSeManterMesmoEmTokensDeCampos()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->assertEquals(InfraQlTokenType::SELECT, $this->objInfraQlLexer->getNumContextClause());
    }

    public function testOContextoDaClausulaFromDeveSeManterMesmoNoTokenDeNomeDeDto()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->assertEquals(InfraQlTokenType::FROM, $this->objInfraQlLexer->getNumContextClause());
    }

    public function testOContextoDaClausulaWhereDeveSeManterMesmoNasCondicoes()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->assertEquals(InfraQlTokenType::WHERE, $this->objInfraQlLexer->getNumContextClause());
    }
    
    public function testOContextoDaClausulaOrderByDeveSeManterMesmoNasCondicoes()
    {
        $this->objInfraQlLexer->getObjNextToken(); // Pular o SELECT...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o FROM...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o nome do DTO...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o WHERE...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo NumIdade...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o operador de comparacao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o numero na primeira condicao...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o AND...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses esquerdo...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o sinal de igual...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a string...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o parenteses direito...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o ORDER BY...
        $this->objInfraQlLexer->getObjNextToken(); // Pular o campo StrNome...
        $this->objInfraQlLexer->getObjNextToken(); // Pular a virgula...
        $this->assertEquals(InfraQlTokenType::ORDER_BY, $this->objInfraQlLexer->getNumContextClause());
    }
}
